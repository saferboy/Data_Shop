// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  name     String
  surname  String
  phone    String[]
  email    String
  address  String
  password String
  comment  Comment[]
  favorite Favorite[]
  order    Order[]
  role     role       @default(admin)
  basket   Basket?
}

model Verification {
  id        String   @unique
  code      String
  email     String
  createdAt DateTime @default(now())
}

model Category {
  id      Int       @id @default(autoincrement())
  title   String
  file    File      @relation(fields: [fileId], references: [id])
  fileId  Int
  product Product[]
  brand   Brand[]
}

model Brand {
  id         Int       @id @default(autoincrement())
  title      String
  file       File      @relation(fields: [fileId], references: [id])
  fileId     Int
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  product    Product[]
}

model Product {
  id           Int         @id @default(autoincrement())
  title        String
  description  String
  incomePrice  String
  sellPrice    String
  discount     String
  count        Int
  image        File[]
  rating       Int         @default(0)
  category     Category?   @relation(fields: [categoryId], references: [id])
  categoryId   Int
  brand        Brand?      @relation(fields: [brandId], references: [id])
  brandId      Int
  comment      Comment[]
  favorite     Favorite[]
  oderItem     OrderItem[]
  BasketItem   BasketItem? @relation(fields: [basketItemId], references: [id])
  basketItemId Int?
  schemaId     Int?
  attributes   Attribute[]
}

model Attribute {
  id        Int      @id @default(autoincrement())
  key       String
  type      KeyType
  value     String
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Schema {
  id    Int         @id @default(autoincrement())
  title String
  keys  SchemaKey[]
}

model SchemaKey {
  id   Int     @id @default(autoincrement())
  key  String
  type KeyType

  schema   Schema? @relation(fields: [schemaId], references: [id])
  schemaId Int?
}

enum KeyType {
  number
  string
  boolean
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   String
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  rate      Int
}

model Basket {
  id         Int          @id @default(autoincrement())
  User       User         @relation(fields: [id], references: [id])
  userId     Int          @unique
  basketItem BasketItem[]
}

model BasketItem {
  id       Int       @id @default(autoincrement())
  basket   Basket    @relation(fields: [basketId], references: [id])
  basketId Int
  product  Product[]
  count    Int
}

model Favorite {
  id        Int     @id @default(autoincrement())
  User      User?   @relation(fields: [userId], references: [id])
  userId    Int?
  productId Int
  Product   Product @relation(fields: [productId], references: [id])
}

model File {
  id        Int        @id @default(autoincrement())
  path      String
  filename  String
  product   Product?   @relation(fields: [productId], references: [id])
  productId Int?
  category  Category[]
  brand     Brand[]
}

model Order {
  id           Int          @id @default(autoincrement())
  User         User         @relation(fields: [userId], references: [id])
  userId       Int
  date         DateTime     @default(now())
  purchaseType PurchaseType
  status       Status
  totalAmount  String
  items        OrderItem[]
  payments     Payments[]
}

// this PurchaseType for Order
enum PurchaseType {
  cash
  card
  installment
}

// this status for Order
enum Status {
  draft
  paid
  prepare
  declined
  complate
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  Product     Product? @relation(fields: [productId], references: [id])
  productId   Int?
  Order       Order?   @relation(fields: [orderId], references: [id])
  orderId     Int?
  count       Int
  incomePrice String
  sellPrice   String
  actualPrice String
  discount    String
}

model Payments {
  id           Int                 @id @default(autoincrement())
  orderId      Int?
  Order        Order?              @relation(fields: [orderId], references: [id])
  comment      String
  amount       String
  date         DateTime            @default(now())
  purchaseType PaymentPurchaseType
  status       StatusPayment
}

enum PaymentPurchaseType {
  cash
  card
}

enum StatusPayment {
  draft
  error
  succes
}

enum role {
  supervisor
  admin
  user
  none
}
